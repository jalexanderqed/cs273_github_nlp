Hi,

I am working on using Rocksdb as SSD cache, i.e. build an memcache interface on top of Rocksdb. There will be only point lookup and the read access pattern will be pretty random.

The main things I am trying to solve is are 
1) have low read amplification
2) have TTL support
3) have way to eviction items when disk becomes full.

My current ideas are:
1) Use level compaction, while caching all the indexes and bloom filters in memory(maybe not the last level, which will depend on how much memory are already used). For the rest memory, leave to block cache/page cache. With these, I hope to reduce keep read amplification to ~1.
2) TTL support is easy, by suffixing TTL in the value.
3) I saw the recent introduction of SstFileManager, which is great for preventing out of disk space. The basic idea of eviction I have in mind is in a background thread, to keep track of all the SST files, and their last modified time. When disk space usage reaches threshold1(e.g. 60%), I will compact the oldest SST files(by calling CompactFiles() API). Hopefully, we can remove some expired items to save space. When disk space usage reaches threshold2(e.g. 80%), I will delete oldest SST files(by calling DeleteFile() API). So such eviction is not LRU, but basically my assumption is the oldest file handles the lowest number of hits now.

What do you guys think about this approach?

Some questions I have are:
1) How to know how many bytes are reduced after calling CompactFiles()? Is there a way to know after manual compaction ends, what's the generated new files and their size? In some cases if there are no expired items which causes compaction not able to free disk space, I might just want to stop doing compaction and wait for it reaches threshold2 and then delete files.
2) To monitor SST files, I am thinking about inheriting SstFileManager, and keep track of the timestamps of all the SST files. I only want to delete the oldest files in the last level to prevent consistency issue(if I delete a file in a lower level, it might remove keys of higher version). Is there any easy way to know what level an SST file is at?
3) Would running multiple rocksdb instances improve performance?

Thanks!

