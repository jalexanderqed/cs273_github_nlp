Hello,

There is already the matter of the environment not being destroyed on termination of the program, we solved that with an `Env::UnsafeDeallocate()` function that we call right before exiting the application.

But there is a tougher problem with the usage tracking of RocksDB (thread_local.cc).

The problem is that it's extremly POSIXey on one side and leaks memory on exit on the other side. I'm aware that the leaked memory isn't problematic in itself, except that it adds noise when you are tracking memory usage in your application.

Currently in RocksDB we have [linker directives](https://github.com/facebook/rocksdb/blob/master/util/thread_local.cc#L83) to place hooks on thread termination, but there are two problems:
- The main thread exit isn't captured
- If the code is within a library, the linker directives will be ignored because it's not invoked in the first place. The user has to add the /INCLUDE manually when linking the library to an exe or a dll (I tested this on Visual Studio 2015 update 2, I might have done something wrong)

I think the best would be to have a facade for threads that allows the addition of an "on_exit" functor, not unlike Boost.Thread. That would also solve a lot of issues regarding deletion order with the StaticMeta object.

What do you think?

