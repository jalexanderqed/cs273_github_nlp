If we look for example at `DBOptions` then we see that there are several options in the C++ API of RocksDB that use `uint64_t` as their type. Unfortunately in RocksJava the `DBOptionsInterface` presents these to the user as a Java `long` which is a two's complement signed 64 bit integer.

Sadly Java has no native support for unsigned integers. However as Java's `long` is 64 bits we can go back and forwards between Java `long` and C++ `uint64_t` without any loss of precision; the issue is that this looks rather ugly to RocksJava users as any value greater than `INT64_MAX` will be wrapped and become a negative value `long` in Java.

For example, if we examine `DBOptions::bytes_per_sync`, then when reading this value from RocksJava via `DBOptions#bytesPerSync()` we have the following underlying code performing the conversion from `uint64_t` to `jlong`:

``` C++
jlong Java_org_rocksdb_Options_bytesPerSync(
    JNIEnv* env, jobject jobj, jlong jhandle) {
  return reinterpret_cast<rocksdb::Options*>(jhandle)->bytes_per_sync;
}
```
1. The problem here is that any value between `INT64_MAX` but within the bound of `UINT64_MAX` will appear to the Java user as a negative value, whereas most likely they would have expected a positive value.

When writing this value from RocksJava via `DBOptions#setBytesPerSync(long)` we have the following underlying code performing the conversion from `jlong` to `uint64_t`:

``` C++
void Java_org_rocksdb_Options_setBytesPerSync(
    JNIEnv* env, jobject jobj, jlong jhandle, jlong bytes_per_sync) {
  reinterpret_cast<rocksdb::Options*>(jhandle)->bytes_per_sync =
      static_cast<int64_t>(bytes_per_sync);
}
```
1. The problem here is that the Java user cannot set a positive value for `bytesPerSync` greater than `INT64_MAX` without understanding that they actually need to set the Java `long` to the equivalent negative value.

In reality there is not a clean solution to this, perhaps the best option we could hope for would be to add our own `UInt64` Java class that wraps a Java `long` or `byte[]`, and allows construction from a Java `String` or `long`, and serialization. This would at least make the Java interface explicitly express that this is a `uint64_t` and show a positive value in Java on the `toString()`.

@siying @yhchiang Thoughts?

