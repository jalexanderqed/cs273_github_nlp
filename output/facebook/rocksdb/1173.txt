Hello,

I'm using rocksdb as a dll library on Windows. One of the users receive the following stable error:

> 2016/06/16-16:18:08.905453 2a00 [WARN] Compaction error: IO error: Failed to FlushViewOfFile: D:\Program Files\Aguarium 2016\Data\ATrees\IDeA\tree__$mm.ldb_data/000057.sst: The process cannot access the file because another process has locked a portion of the file.
> 
> 2016/06/16-16:18:08.905453 2a00 [ERROR] Waiting after background compaction error: IO error: Failed to FlushViewOfFile: D:\Program Files\Aguarium 2016\Data\ATrees\IDeA\tree__$mm.ldb_data/000057.sst: The process cannot access the file because another process has locked a portion of the file.
> , Accumulated background error counts: 1
> 
> 2016/06/16-16:18:09.908511 2a00 [ERROR] Waiting after background compaction error: IO error: Failed to FlushViewOfFile: D:\Program Files\Aguarium 2016\Data\ATrees\IDeA\tree__$mm.ldb_data/000057.sst: The process cannot access the file because another process has locked a portion of the file.
> , Accumulated background error counts: 2

I've set `allow_mmap_writes` to true, because it gives 150% boost for me. So this error happens in `WinMmapFile` class.

I've solved this error by re-trying `FlushViewOfFile` after some time. So I changed 

```
      // Flush only the amount of that is a multiple of pages
      if (!::FlushViewOfFile(mapped_begin_ + page_begin,
                             (page_end - page_begin) + page_size_)) {
        s = IOErrorFromWindowsError("Failed to FlushViewOfFile: " + filename_,
                                  GetLastError());
      }
```

to

```
      bool abort = false;
      int attempts = 0;
      while (!abort) {
          // Flush only the amount of that is a multiple of pages
          bool res = ::FlushViewOfFile(mapped_begin_ + page_begin, (page_end - page_begin) + page_size_);
          if (!res) {
              Sleep(file_errors_delay_milliseconds);
          }
          abort = ++attempts > file_errors_retry_count || res; // first one is not counted as attempt
      }
      if (attempts > file_errors_retry_count) {
          s = IOErrorFromWindowsError("Failed to FlushViewOfFile: " + filename_, GetLastError());
      }
```

with `file_errors_retry_count` as 10 and `file_errors_delay_milliseconds` as 500.

I understand that the solution is a bit dirty, but hope it will help you to catch the origins of this problem. Maybe it was caused by some synchronization problems.

Also I've thought about anti-virus software, but user close the anti-virus and the problem wasn't gone.

