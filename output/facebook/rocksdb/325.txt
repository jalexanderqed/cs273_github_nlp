I'm testing RocksDB on iOS and a simple test app is crashing on simple iteration.

```
std::string kDBPath = "/tmp/rocksdb_simple_example";

+(void)internalIterationTest
{
    DB* db;
    Options options;

    // Optimize RocksDB. This is the easiest way to get RocksDB to perform well
//    options.IncreaseParallelism();
//    options.OptimizeLevelStyleCompaction();
    // create the DB if it's not already present
    options.create_if_missing = true;
    options.paranoid_checks = true;

    // open DB
    Status s = DB::Open(options, kDBPath, &db);
    assert(s.ok());

    // Put key-value
    s = db->Put(WriteOptions(), "key", "super duper");
    assert(s.ok());
    std::string value;
    // get value
    s = db->Get(ReadOptions(), "key", &value);
    assert(s.ok());
    assert(value == "super duper");

    NSLog(@"value:%s", value.c_str());

    ReadOptions readOptions = ReadOptions();
    readOptions.fill_cache = false;
    readOptions.snapshot = db->GetSnapshot();

    rocksdb::Iterator* it = db->NewIterator(readOptions);
    for (it->SeekToFirst();   // <---- CRASHES HERE
         it->Valid();
         it->Next()) {
        NSLog(@"key:%s value:%s", it->key().ToString().c_str(), it->value().ToString().c_str());
    }

    assert(it->status().ok()); // Check for any errors found during the scan
    delete it;
    db->ReleaseSnapshot(readOptions.snapshot);

    delete db;
}
```

Console:

```
2014-09-30 14:41:19.354 RockyPlay[17407:1056596] value:super duper
(lldb) <-- crash
```

Stack trace:

```
Thread 1Queue : com.apple.main-thread (serial)
#0  0x0006dc4e in rocksdb::Version::LevelFileNumIterator::key() const ()
#1  0x00092670 in rocksdb::(anonymous namespace)::TwoLevelIterator::SeekToFirst() ()
#2  0x0008b1ca in rocksdb::MergingIterator::SeekToFirst() ()
#3  0x00045590 in rocksdb::DBIter::SeekToFirst() ()
#4  0x00045ca4 in rocksdb::ArenaWrappedDBIter::SeekToFirst() ()
#5  0x0000a420 in +[SemiRocksDB internalIterationTest] at ~ ... RockyPlay/SemiRocksDB.mm:102
```

Debugger

```
RockyPlay`rocksdb::(anonymous namespace)::TwoLevelIterator::SeekToFirst():
0x92640:  pushl  %ebp
0x92641:  movl   %esp, %ebp
0x92643:  pushl  %esi
0x92644:  pushl  %eax
0x92645:  movl   0x8(%ebp), %esi
0x92648:  movl   0x18(%esi), %eax
0x9264b:  movl   (%eax), %ecx
0x9264d:  movl   %eax, (%esp)
0x92650:  calll  *0xc(%ecx)
0x92653:  movl   0x18(%esi), %eax
0x92656:  movl   (%eax), %ecx
0x92658:  movl   %eax, (%esp)
0x9265b:  calll  *0x8(%ecx)
0x9265e:  movb   %al, 0x1c(%esi)
0x92661:  testb  %al, %al
0x92663:  je     0x92676                   ; rocksdb::(anonymous namespace)::TwoLevelIterator::SeekToFirst() + 54
0x92665:  movl   0x18(%esi), %eax
0x92668:  movl   (%eax), %ecx
0x9266a:  movl   %eax, (%esp)
0x9266d:  calll  *0x20(%ecx)
0x92670:  movl   %edx, 0x24(%esi)   <----- EXC_BAD_ACCESS (code=2, address=0x1d)
0x92673:  movl   %eax, 0x20(%esi)
0x92676:  movl   %esi, %ecx
0x92678:  calll  0x92b40                   ; rocksdb::(anonymous namespace)::TwoLevelIterator::InitDataBlock()
0x9267d:  movl   0x28(%esi), %eax
0x92680:  testl  %eax, %eax
0x92682:  je     0x926af                   ; rocksdb::(anonymous namespace)::TwoLevelIterator::SeekToFirst() + 111
0x92684:  movl   (%eax), %ecx
0x92686:  movl   %eax, (%esp)
0x92689:  calll  *0xc(%ecx)
0x9268c:  movl   0x28(%esi), %eax
0x9268f:  movl   (%eax), %ecx
0x92691:  movl   %eax, (%esp)
0x92694:  calll  *0x8(%ecx)
0x92697:  movb   %al, 0x2c(%esi)
0x9269a:  testb  %al, %al
0x9269c:  je     0x926af                   ; rocksdb::(anonymous namespace)::TwoLevelIterator::SeekToFirst() + 111
0x9269e:  movl   0x28(%esi), %eax
0x926a1:  movl   (%eax), %ecx
```

