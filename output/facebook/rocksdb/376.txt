It seems that the _max_open_files_ options is not used when using _RepairDB_ on a database:

```
#include <rocksdb/db.h>
#include <iostream>
#include <sstream>

#include <sys/time.h>
#include <sys/resource.h>

int main()
{
    rocksdb::Options options;

    // limit to 10 files 

    options.max_open_files = 10;
    options.compression = rocksdb::kNoCompression;
    options.create_if_missing = true;

    rocksdb::DestroyDB("./testdb", options);

    // create a db with more files than the limit, ok
    {
        rocksdb::DB *db;
        assert(rocksdb::DB::Open(options, "./testdb", &db).ok());

        std::string value_1mb;
        for (int i = 0; i < 1024 * 1024; ++i) {
            value_1mb.append("a");
        }

        std::cout << "populating db..." << std::endl;
        for (int i = 0; i < 500; ++i) {
            std::ostringstream r;
            r << i;
            assert(db->Put(rocksdb::WriteOptions(), r.str(), value_1mb).ok());
        }

        delete db;
    }

    // attempt to repair and reopen the db with a limit on number of FDs, nok
    {
        struct rlimit r;
        r.rlim_cur = 20;
        r.rlim_max = 20;
        assert(::setrlimit(RLIMIT_NOFILE, &r) == 0);

        rocksdb::Status s;

        std::cout << "repairing db..." << std::endl;
        s = rocksdb::RepairDB("./testdb", options);
        std::cout << "repairdb returned: " << s.ToString() << std::endl;
        assert(s.ok());

        rocksdb::DB *db;
        std::cout << "opening db..." << std::endl;
        s = rocksdb::DB::Open(options, "./testdb", &db);
        std::cout << "open returned: " << s.ToString() << std::endl;
        delete db;
    }

    return 0;
}
```

Results in:

```
populating db...
repairing db...
repairdb returned: IO error: ./testdb/000001.dbtmp: Too many open files
exhaust: main.cpp:51: int main(): Assertion `s.ok()' failed.
Aborted
```

This can be problematic when dealing with larger databases, I had to increase the limit to > 150 000 to repair a 200gb database, using a default configuration.

