Hello and thank you for RocksDB,

  ldb (ldb_cmd.h HexToString) usage of sscanf is O(N) making ldb O(N^2).  I noticed this on RHEL7 with glibc-2.17-55.el7_0.5.x86_64 while loading some large hex values.  Here is a reproducer for a bash shell:

```
> for i in {1,2,4,8}; do rm -rf /tmp/tmp.rdb ; perl -e 'printf qq{%d ==> 0x%s\n},1,0 x $ARGV[0]' ${i}000000 | time -v ./ldb --create_if_missing --db=/tmp/tmp.rdb --value_hex load 2>&1 | egrep 'User|Elapsed' ; done
   User time (seconds): 9.45
   Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.48
   User time (seconds): 39.79
   Elapsed (wall clock) time (h:mm:ss or m:ss): 0:40.14
   User time (seconds): 174.03
   Elapsed (wall clock) time (h:mm:ss or m:ss): 2:55.41
   User time (seconds): 774.66
   Elapsed (wall clock) time (h:mm:ss or m:ss): 13:02.68
```

Just to demonstrate the perl time and max line length:

```
> for i in {1,2,4,8}; do perl -e 'printf qq{%d ==> 0x%s\n},1,0 x $ARGV[0]' ${i}000000 | time -v wc -L 2>&1 | egrep 'User|Elapsed|00000' ; done
1000008
   User time (seconds): 0.01
   Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.01
2000008
   User time (seconds): 0.02
   Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.02
4000008
   User time (seconds): 0.04
   Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.05
8000008
   User time (seconds): 0.08
   Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.10
```

An ltrace while ldb was running:

```
> ltrace -fcp `pidof ldb`
time     seconds  usecs/call     calls      function
------ ----------- ----------- --------- --------------------
100.00    3.481690         528      6589 sscanf
------ ----------- ----------- --------- --------------------
100.00    3.481690                  6589 total
```

This is the glibc bug:

  https://sourceware.org/bugzilla/show_bug.cgi?id=17577

and a stackoverflow discussion:

  http://stackoverflow.com/questions/23923924/why-is-glibcs-sscanf-vastly-slower-than-fscanf-on-linux

Cheers.

