 https://reviews.facebook.net/D42321 imposed severe performance penalties on the Windows port and makes it nonfunctional. So much so that unit tests are visibly slow.

To re-cap. The change moved common parts of counters, buffering and rate-limiting to a platform independent code within file_reader_writer.cc.

The problem is that these parts are platform dependent on Windows and there is no easy way to make them portable. The major reason is that Windows env code introduces a file access mode which disables OS file buffering which is a must for any serious server project on Windows. This imposes requirement on buffer alignment and the numbers that we feed to the rate limiter.

The current state of the code features the following on Windows:
- Double accounting for performance counters ( easy to fix)
- Double buffering for Writer (no easy fix)
- Double and incorrect Rate Limiting for Writer (no easy fix)
- Double Locking and double buffering in !use_os_buffer mode in ReadAhead wrapper
- Double virtual dispatch (minor but noticeable for a C++ folks)

Options to fix:
- I have prepared a patch that works and passes unit tests with as little `#ifdef OS_WIN`   as possible. This consists of mostly forwarding the calls down the line and adding some necessary things that would enable existing unit tests pass. This is ugly and brings out platform `ifdefs`code that was previously neatly separated within `env_*.cc` code via virtual interfaces. However, this is the least intrusive option now and unblocks us.
- Rollback the change and do nothing. Things will function as before.
- Rollback and re-work using existing  virtual interface framework for file access classes using some existing patterns such as GoF templates where different pieces of functionality are put into a default implementation of the virtual functions and individual platform decides what to override. This will take time and I do not have Linux box to test.

Thoughts, comments?

