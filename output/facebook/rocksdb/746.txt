The current IO workload that is generated from log file appends is very
unfriendly to the file system.  The problem is that for every append
and fdatasync, the fs has to write the data block _and_ write an entry
to its journal that updates the inode metadata (size, mtime, and maybe
allocation map).

Note that the current option to use fallocate to preallocate space only
sort of helps: it means that the file's data blocks will be contiguous on
disk, but it doesn't change the IO pattern.  fallocate gives the extents
to the file, but marks them 'unwritten' so that if you read them you'll
get zeros.  When you go to write real data, teh fs still has to update the
inode to indicate the blocks are now written and there is real data on
disk.  There is no way to skip this step without actually writing a bunch
of zeros--the fs doesn't know what garbage may be on the platter (maybe
some other user's old secrets) and won't expose it in a few file as a
security precaution.

This series adds a recycle_log_files option that takes previously written
logs that would otherwise be deleted and puts them on a recycle queue.
The next time we need a new log file, we use one of those if it is
available.  That way we get a previously written and allocated file and
can write records to it and fdatasync without touching the inode metadata
(mtime will eventually get written, but only once, much later--not on
every IO).  For XFS, this turns 3 IOs into 1 IO; for ext4 it turns 2 IOs
into 1 IO.  Yay!

The main challenge is that the file has a bunch of "garbage" in it that
looks like it is real: they are valid records with valid checksums. To
avoid reading them back, we change the checksum to XOR in the log_number.
That way, when I reuse log 10 as 23, the CRC won't match on read and I'll
stop reading.

I'm still fighting a few issues, mainly just getting all of the tests to
work with this change, but in practice things are working.  Early review
would be appreciated to ensure I'm not wasting my time polishing something
that is fundamentally broken.

Thanks!

