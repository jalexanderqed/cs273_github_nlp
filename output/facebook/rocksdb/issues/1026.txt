Link to Issue https://github.com/facebook/rocksdb/issues/1009 

@kradhakrishnan @siying @igorcanadi

Changes in this patch
- Replaced histogram counter type uint64_t with std::atomic_uint_fast64_t to support update atomicity
- Extracted an interface (class Histogram) for HistogramImpl and HistogramWindowingImpl and wrapped the data in struct HistogramStat 
- Introduced HistogramWindowingImpl class for supporting real-time histogram caculation
- Extended histogram_test for better coverage

I had run performance tests to verify no regression is introduced. 

Let me know if there is anything I can do to make it easier for your review. 

Hi @kradhakrishnan @siying @igorcanadi 
Could you please help us reviewing this patch? 
Let me know if there is anything we can do to make it easier for you to reivew. 
Thank you. 

I had utilized db_bench_tool as the test framework for histogram perf measurement. You can find the implementation here: https://github.com/SherlockNoMad/rocksdb/commit/7b4ae1787e2d376c8916064a291bbe9d4eb6a154 

The command used is: db_bench_je.exe --benchmarks=histogram --num=1000000000 --threads=32
It’s  basically concurrently update one Histogram instance with 32 threads, where each thread add 1 billion samples. The value of sample is randomly generated by Random64:: Skewed(30), which should pick a number in range [0, 2^30 - 1] with exponential bias towards smaller numbers. 

Here’s the performance result I got:
Old HistogramImpl                   0.139 micros/op 7193978 ops/sec;
New HistogramImpl (atomic)  0.188 micros/op 5328982 ops/sec;
HistogramWindowingImpl  0.242 micros/op 4133025 ops/sec;

Attached please also find the detailed report on the Histogram instance updated. 
Notice that old HistogramImpl is clearly not multi-thread safe, as no member is atomic. With the test setting above, we should expect it counting 32 billion samples in total. However, it reports that it received only 4.7 Billion samples in total and the percentile reported is clearly wrong.
New HistogramImpe with atomic members reports receiving exactly 32 Billions samples and the reported percentile is clear more exponentially biased to smaller numbers.
HistogramWindowingImpl shows having much less than 32 billion records, since it expire the sample after 5 mins. However, the avg, median, P50, P99, P999 reported are very closed to the new HistogramImpl. 

To me, to make the Histogram functionally correct is vital. The 0.049 micro/op sacrifice in speed for the new HistogramImpl is acceptable. 
HistogramWindowingImpl is indeed slower, I can make it an option for user to choose from. 

Let me know if you have any suggestions to further improve the counter performance. Thank you. 

[db_bench_hist_new.txt](https://github.com/facebook/rocksdb/files/168546/db_bench_hist_new.txt)
[db_bench_hist_old.txt](https://github.com/facebook/rocksdb/files/168545/db_bench_hist_old.txt)
[db_bench_histwindowing.txt](https://github.com/facebook/rocksdb/files/168544/db_bench_histwindowing.txt)

@SherlockNoMad Travis failed and suggested some format changes. Is it possible for you to apply it to your diff?

I'm OK with this performance penalty. I'll wait for others to comment on it.

Thanks for sharing the perf results

I looked through the codes. Some final comments and we are good to go!

AppVeyor failed but the failure was unrelated. 

Thank you for accepting this pull request. :)

@SherlockNoMad this triggers a build failure in our internal CI:

11:30:29                  from ./util/histogram.h:13,
11:30:29                  from util/histogram.cc:18:
11:30:29 util/histogram.cc: In member function ‘void rocksdb::HistogramStat::Add(uint64_t)’:
11:30:29 util/histogram.cc:104:40: error: comparison of unsigned expression >= 0 is always true [-Werror=type-limits]
11:30:29    assert(index < num_buckets_ && index >= 0);
11:30:29                                         ^

Can you fix it?

@SherlockNoMad you are welcome, but it has a problem to fix now.

Working on it now...

Can you please look into these errors. They were reported in our local CI system.

In file included from unity.cc:109:0:
util/histogram_windowing.cc:18:31: error: redefinition of â€˜const rocksdb::HistogramBucketMapper rocksdb::{anonymous}::bucketMapperâ€™
   const HistogramBucketMapper bucketMapper;
                               ^
In file included from unity.cc:108:0:
util/histogram.cc:77:31: note: â€˜const rocksdb::HistogramBucketMapper rocksdb::{anonymous}::bucketMapperâ€™ previously declared here
   const HistogramBucketMapper bucketMapper;

valgrind error:

==627965== 5,768 bytes in 1 blocks are definitely lost in loss record 10 of 10
==627965==    at 0x4C2B9C4: operator new[](unsigned long) (in /usr/local/fbcode/gcc-4.9-glibc-2.20/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==627965==    by 0x5B230F: rocksdb::HistogramWindowingImpl::HistogramWindowingImpl() (histogram_windowing.cc:23)
==627965==    by 0x411246: rocksdb::HistogramTest_ClearHistogram_Test::TestBody() (histogram_test.cc:112)
==627965==    by 0x6DF027: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest-all.cc:3822)
==627965==    by 0x6DF027: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test_, void (testing::Test::_)(), char const*) (gtest-all.cc:3858)
==627965==    by 0x6D415C: testing::Test::Run() (gtest-all.cc:3895)
==627965==    by 0x6D41E8: testing::TestInfo::Run() [clone .part.562](gtest-all.cc:4070)
==627965==    by 0x6D4354: Run (gtest-all.cc:4045)
==627965==    by 0x6D4354: testing::TestCase::Run() [clone .part.563](gtest-all.cc:4188)
==627965==    by 0x6D4714: Run (gtest-all.cc:6026)
==627965==    by 0x6D4714: testing::internal::UnitTestImpl::RunAllTests() (gtest-all.cc:6060)
==627965==    by 0x6D492B: HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool> (gtest-all.cc:3822)
==627965==    by 0x6D492B: HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool> (gtest-all.cc:3858)
==627965==    by 0x6D492B: testing::UnitTest::Run() (gtest-all.cc:5681)
==627965==    by 0x4158E2: RUN_ALL_TESTS (gtest.h:20722)
==627965==    by 0x4158E2: main (histogram_test.cc:209)

ok. I am looking into this ...

