These changes reimplement the Bytewise and Reverse Bytewise comparators from C++ in Java and allow custom Java comparators to be specified to `jdb_bench` for benchmarking.

I have performed some initial benchmarks on comparing the performance of C++ and Java comparators.
My machine is: `Apple MacBook Pro (Retina, 15-inch, Mid 2015)` / `2.8 GHz Intel Core i7` / `16 GB 1600 MHz DDR3` / `OS X El Capitain 10.11.3 (15D21)`.
# Summary

The Java Comparators are hugely less-efficient that their C++ counterparts, this is particularly pronounced when only a single thread is used.

Single-threaded writes (`fillseq`) are `~6x` faster whilst random reads (`readrandom`) are `105x` faster when using a C++ comparator as opposed to the equivalent Java comparator.

Multi-threaded (4 threads) writes (`fillseq`) are `~7.87x` faster whilst random reads (`readrandom`) are `~4.5x` faster when using a C++ comparator as opposed to the equivalent Java comparator
# Detailed results

My benchmark results from `jdb_bench` look like:
# C++ BytewiseComparatorImpl with 1 thread:

``` bash
jdb_bench.sh --key_size=16 --num_levels=6 --threads=1 --num=1000000

Running benchmark in 64-Bit mode.
Using database directory: /var/folders/3y/d05wc92d1cncvsh8p0j_wm8w0000gn/T/rocksdb-jni185199274612474045
Keys:     16 bytes each
Values:   100 bytes each (50 bytes after compression)
Entries:  1000000
RawSize:  110.6 MB (estimated)
FileSize:   62.9 MB (estimated)
Memtable Factory: SkipListFactory
Prefix:   0 bytes
Compression: snappy
------------------------------------------------
fillseq          :     2.60445 micros/op;   42.5 MB/s; 1000000 ops done;  1 / 1 task(s) finished.
readrandom       :     5.99063 micros/op;   18.5 MB/s; 1000000 / 1000000 found;  1 / 1 task(s) finished.
fillrandom       :     3.64430 micros/op;   30.4 MB/s; 1000000 ops done;  1 / 1 task(s) finished.
```
# Java BytewiseComparator with 1 thread:

``` bash
jdb_bench.sh --key_size=16 --num_levels=6 --threads=1 --num=1000000 --java_comparator=org.rocksdb.util.BytewiseComparator

Running benchmark in 64-Bit mode.
Using database directory: /var/folders/3y/d05wc92d1cncvsh8p0j_wm8w0000gn/T/rocksdb-jni1700754963404680864
Keys:     16 bytes each
Values:   100 bytes each (50 bytes after compression)
Entries:  1000000
RawSize:  110.6 MB (estimated)
FileSize:   62.9 MB (estimated)
Memtable Factory: SkipListFactory
Prefix:   0 bytes
Compression: snappy
------------------------------------------------
fillseq          :    20.58880 micros/op;    5.4 MB/s; 1000000 ops done;  1 / 1 task(s) finished.
readrandom       :    27.19633 micros/op;    4.1 MB/s; 1000000 / 1000000 found;  1 / 1 task(s) finished.
fillrandom       :   258.76947 micros/op;    0.4 MB/s; 1000000 ops done;  1 / 1 task(s) finished.
```
# C++ BytewiseComparatorImpl with 4 threads:

``` bash
jdb_bench.sh --key_size=16 --num_levels=6 --threads=4 --num=1000000

Running benchmark in 64-Bit mode.
Using database directory: /var/folders/3y/d05wc92d1cncvsh8p0j_wm8w0000gn/T/rocksdb-jni3375894617908530182
Keys:     16 bytes each
Values:   100 bytes each (50 bytes after compression)
Entries:  1000000
RawSize:  110.6 MB (estimated)
FileSize:   62.9 MB (estimated)
Memtable Factory: SkipListFactory
Prefix:   0 bytes
Compression: snappy
------------------------------------------------
fillseq          :     2.38465 micros/op;   46.4 MB/s; 1000000 ops done;  1 / 1 task(s) finished.
readrandom       :     1.75450 micros/op;   63.1 MB/s; 1000000 / 1000000 found;  4 / 4 task(s) finished.
fillrandom       :     3.61791 micros/op;   30.6 MB/s; 1000000 ops done;  1 / 1 task(s) finished.
```
# Java BytewiseComparator with 4 threads:

``` bash
jdb_bench.sh --key_size=16 --num_levels=6 --threads=4 --num=1000000 --java_comparator=org.rocksdb.util.BytewiseComparator

Running benchmark in 64-Bit mode.
Using database directory: /var/folders/3y/d05wc92d1cncvsh8p0j_wm8w0000gn/T/rocksdb-jni1986905280058819724
Keys:     16 bytes each
Values:   100 bytes each (50 bytes after compression)
Entries:  1000000
RawSize:  110.6 MB (estimated)
FileSize:   62.9 MB (estimated)
Memtable Factory: SkipListFactory
Prefix:   0 bytes
Compression: snappy
------------------------------------------------
fillseq          :    18.54094 micros/op;    6.0 MB/s; 1000000 ops done;  1 / 1 task(s) finished.
readrandom       :   179.19009 micros/op;    0.6 MB/s; 1000000 / 1000000 found;  4 / 4 task(s) finished.
fillrandom       :   244.19816 micros/op;    0.5 MB/s; 1000000 ops done;  1 / 1 task(s) finished.
```

Thanks for adding this support!  LGTM!

