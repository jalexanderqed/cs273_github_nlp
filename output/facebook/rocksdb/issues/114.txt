I must be doing something stupid, but I can't build a simple program with rocksdb. I get a bunch of undefined references from standard functions. Can anyone give me some help? Any help would be appreciated!!

I compile and build with the following commands:
g++ -c -I./include -std=c++11 mytest.cc
g++ -o mytest -L. -lrocksdb mytest.o

The program (mytest.cc) is as follows:
# include &lt;assert.h&gt;
# include &lt;iostream&gt;
# include "rocksdb/db.h"

int
main(int argc, char *argv[])
{
rocksdb::DB *db;
rocksdb::Options options;

options.create_if_missing = true;
options.error_if_exists = true;

rocksdb::Status status = rocksdb::DB::Open(options, "/tmp/testdb", &db);
assert(status.ok());

delete db;

return 0;
}

I get back the following complaints:

mytest.o: In function main':
mytest.cc:(.text+0x11b): undefined reference torocksdb::DB::Open(rocksdb::Options const&, std::string const&, rocksdb::DB**)'
mytest.o: In function rocksdb::Options::Options()':
mytest.cc:(.text._ZN7rocksdb7OptionsC2Ev[_ZN7rocksdb7OptionsC5Ev]+0x15): undefined reference torocksdb::DBOptions::DBOptions()'
mytest.cc:(.text._ZN7rocksdb7OptionsC2Ev[_ZN7rocksdb7OptionsC5Ev]+0x27): undefined reference to `rocksdb::ColumnFamilyOptions::ColumnFamilyOptions()'
collect2: error: ld returned 1 exit status

Hmm looking. How did you build rocksdb? `make shared_lib`?

just "make"

Hey, I just tried the same thing and it works for me:

  icanadi@icanadi-mbp1 rocksdb <master>$ g++ -c -I./include -std=c++11 mytest.cc
  icanadi@icanadi-mbp1 rocksdb <master>$ g++ -o mytest -L. -lrocksdb mytest.o -lbz2 -lz -lsnappy
  icanadi@icanadi-mbp1 rocksdb <master>$ ./mytest

Can you please try `make clean; make`?

I just tried again after "make clean; make" and got the same results (the build didn't work in the same way).  I guess my environment must be screwed up (but how?).  I'm building with g++ 4.7.2 on ubuntu 12.10.  Do I need g++ 4.8?

You shouldn't need g++ 4.8.

Can you try:
1) building with 2.8 release? (branch 2.8.fb)
2) linking with shared library (you can make it with `make shared_lib`)

Let me try the same thing on ubuntu 12.10

Reproed the issue on ubuntu 12.10. Looking

It looks like you have to specify library after your .o file. So your second command should be:

   g++ -o mytest mytest.o -L. -lrocksdb -lsnappy -lpthread -lbz2 -lz -lrt

(also added other libraries you need to link with)

You're right--that works for me.  Sorry for the bother.

