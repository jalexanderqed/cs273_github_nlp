I would like to use RocksDB on a windows 7 64 bits platform.
I try to compile using the steps describe in the CMakeLists.txt using the following command:

1) cmake -G "Visual Studio 14 Win64" -DJNI=1 .. 
log file: [msbuild.txt](https://github.com/facebook/rocksdb/files/411586/msbuild.txt)

2) msbuild rocksdb.sln /m
The last one generates the following errors:
         c:\workspace\rocksdb-master\java\rocksjni\options.cc(2039): error C2131: expression did not evaluate to a constant [C:\workspace\rocksdb-master\build\java\rocksdbjni.vcxproj]
         c:\workspace\rocksdb-master\java\rocksjni\options.cc(2041): error C2131: expression did not evaluate to a constant [C:\workspace\rocksdb-master\build\java\rocksdbjni.vcxproj]
         c:\workspace\rocksdb-master\java\rocksjni\options.cc(2043): error C2440: 'reinterpret_cast': cannot convert from 'int' to 'jint' [C:\workspace\rocksdb-master\build\java\rocksdbjni.vcxproj]
         c:\workspace\rocksdb-master\java\rocksjni\options.cc(2066): error C2440: 'reinterpret_cast': cannot convert from 'jint' to 'int32_t' [C:\workspace\rocksdb-master\build\java\rocksdbjni.vcxproj]
         c:\workspace\rocksdb-master\java\rocksjni\options.cc(3346): error C2131: expression did not evaluate to a constant [C:\workspace\rocksdb-master\build\java\rocksdbjni.vcxproj]
         c:\workspace\rocksdb-master\java\rocksjni\options.cc(3348): error C2131: expression did not evaluate to a constant [C:\workspace\rocksdb-master\build\java\rocksdbjni.vcxproj]
         c:\workspace\rocksdb-master\java\rocksjni\options.cc(3350): error C2440: 'reinterpret_cast': cannot convert from 'int' to 'jint' [C:\workspace\rocksdb-master\build\java\rocksdbjni.vcxproj]
         c:\workspace\rocksdb-master\java\rocksjni\options.cc(3374): error C2440: 'reinterpret_cast': cannot convert from 'jint' to 'int32_t' [C:\workspace\rocksdb-master\build\java\rocksdbjni.vcxproj]

full log file:  [cmake.txt](https://github.com/facebook/rocksdb/files/411585/cmake.txt)

If I compile the project without JNI it works but I've got an exception java.lang.UnsatisfiedLinkError when I try to use the DLL with a recent Rocksdb Java JAR 

What did I miss or what can I do in order to build correctly ?

I am having the same problem with Snappy extension. Besides the library refuses to work no matter compression there is,it always looks for snappy.

As I understand it, libsnappy is required when building on Windows. I think you can find the relevant information on that here -https://github.com/facebook/rocksdb/issues/1266

No snappy is not mandatory for Windows. I successfully build the project without any flag activated.
My issue is the errors that are raised when I compile the project on windows platform with the JNI option activated.

@vincenthouy It is apparent that JNI code does not obey the modular architecture of RocksDB and that means respecting the optional nature of certain components.

@yuslepukhin : Ok I compile with both JNI and SNAPPY activated. But my build provides the same error. Do I need to include all third dependencies ?

OK, I correct the compilation errors on option.cc that was similar to those of the issue :  #1220 
It's on the option.cc that variable arrays were also provided.

But when I try to use my rocskdb.dll file with the java API (I rebuild it also to be sure to be on the same version everywhere) I still have the link exception when the newOptions method is called.

```
Exception in thread "main" java.lang.UnsatisfiedLinkError: org.rocksdb.Options.newOptions()J
    at org.rocksdb.Options.newOptions(Native Method)
    at org.rocksdb.Options.<init>(Options.java:30)
    at org.rocksdb.RocksDB.open(RocksDB.java:111)
```

I put the rocksdb dll on the JAR with the snappy64.dll. Is it sufficient or I do I still miss to add some other C++ library at compilation and/or at runtime?

@vincenthouy I do not know much about JNI. Whether you need the DLL depends on whether you link to DLL or to a static version which I assume is the same setting for the rocksdb libraries. The latter link to static by default unless you changed.

As I indicated in the previous post Rocksdb 3rd parties are option and you need to follow the instructions in CMake file and take a look at thirdparty.inc for more instructions if you want to customize where the 3rd party includes and binaries are found.

There is now a Windows DLL (without any of the 3rd party libraries supported) publicly available for RocksJava 4.9.0, see https://github.com/facebook/rocksdb/issues/1177#issuecomment-240582631

@adamretter  great news I will check your work. Thanks a lot.

For my remaining problem, I understand what I did wrong. I was using the wrong produced dll. I was getting the one on the build/release folder instead of the build/java/release one. I'm really sorry for this mistake, I didn't see that another dll was build for JNI.

So there is still some issue on the master branch with a Visual Studio 2014 compiler. There are 2 problems:
- use of some reinterpret_cast that I've modifieed with static_cast
- some variable size array that I've modifieed with std::unique_ptr

Here is the patch I used in order to compile the project:
[patch.txt](https://github.com/facebook/rocksdb/files/424425/patch.txt)

I hope it can help you in your fantastic works. Thanks for your support.

@vincenthouy Thanks for the patch, I will take a look, although I think some of these have already been addressed in HEAD.

