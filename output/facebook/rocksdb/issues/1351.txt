@siying @yiwu-arbug 

I tried to randomly kill server in every 5min, and after two days, the above error happened, it seems that WAL is corrupted. 

We use 4.12 version, have 4 column families, and use WAL recover mode 1. 

Hey @siddontang, did you use master branch or 4.12.fb branch ?
I did not merge @yiwu-arbug fix in 4.12.fb branch yet

Hi @IslamAbdelRahman 

I used 4.12.fb branch before, but I use master (sha1: c2a62a4cb2593362cc82b812d2b90406b970e52c) to test it again and still meet the error. 

WAL recover mode 1 is kAbsoluteConsistency.
This is too strict to recover a service from machine crash. For a crash safe recovery, please use kPointInTimeRecovery.

Thanks 

Hi @siying 

> This is too strict to recover a service from machine crash

But here is only process been killed, not machine crash. 

@siddontang same thing.

@siddontang it's almost the same thing same thing. The only difference is you can use kTolerateCorruptedTailRecords if you just kill the process. kAbsoluteConsistency works for neither of them.

@siying I don't understand why just kill process will cause wal lost some data. In my understanding if we flush data into OS's page cache and kill our process  before OS sync page cache to disk, if the machine don't crash, the data will not lose, isn't it?

I have the same question

On Mon, Sep 26, 2016 at 6:53 PM, zhangjinpeng1987 notifications@github.com
wrote:

> @siying https://github.com/siying I don't understand why just kill
> process will cause wal lost some data. In my understanding if we flush data
> into OS's page cache and kill our process before OS sync page cache to
> disk, if the machine don't crash, the data will not lose, isn't it?
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/facebook/rocksdb/issues/1351#issuecomment-249746148,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/ABkKTWAhqf6sQ6-wK7ofwtZMR1myCpcvks5quHc3gaJpZM4KFhxP
> .

## 

Mark Callaghan
mdcallag@gmail.com

@zhangjinpeng1987 @mdcallag a write is not necessarily atomically flushed to WAL. Writes are divided to align with the 4KB boundaries. If the service crashes after finishing the first part of the write, before the second part has the chance to be written, then kAbsoluteConsistency will see an unfinished tail.

@zhangjinpeng1987 @mdcallag By the way, even if we never cut a write batch to multiple file write operations, it requires the kernel/file system to guarantee a write call is atomic to make sure kAbsoluteConsistency  can work. That is, if the user kills a process in the middle of posix write(), whether they can see partial data. I'm not the expert on it, but my feeling is, it's likely to be not true for many file systems.

@siying  agree with you. Suppose there is a WriteBatch with 1 MB of data records. When this transaction is written to the wal, it is likely that it will be written out from user-space memory to OS buffers in a non-atomic way, is it not?

Sounds like great content for a blog post or wiki entry.

On Tue, Sep 27, 2016 at 10:56 AM, dhruba borthakur <notifications@github.com

> wrote:
> 
> @siying https://github.com/siying agree with you. Suppose there is a
> WriteBatch with 1 MB of data records. When this transaction is written to
> the wal, it is likely that it will be written out from user-space memory to
> OS buffers in a non-atomic way, is it not?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/facebook/rocksdb/issues/1351#issuecomment-249944838,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/ABkKTdld_xXXUE3mhBbCt9P2Z9s7YVV1ks5quVi7gaJpZM4KFhxP
> .

## 

Mark Callaghan
mdcallag@gmail.com

@siying got it. That is why db like InnoDB need double write buffer.

InnoDB double write buffer protects page writes not redo (WAL) writes.
Maybe InnoDB reports this error differently but I assume both can get
corruption at end of redo/WAL log files

On Wednesday, September 28, 2016, zhangjinpeng1987 notifications@github.com
wrote:

> @siying https://github.com/siying got it. That is why db like InnoDB
> need double write buffer.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/facebook/rocksdb/issues/1351#issuecomment-250362972,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/ABkKTRSUmiKWvUPy7vLSThXpVAVGPOeHks5quzNHgaJpZM4KFhxP
> .

## 

Mark Callaghan
mdcallag@gmail.com

@dhruba I consulted someone from kernel team about this. At least for ext4, the kill signal can terminate the process after the file system finishes copying some pages but not all pages. For XFS, he's not sure.

@mdcallag You are right. I mean InnoDB use DWB to solve pages partial write problem.

