I am planning to code rocksdb bindings for python. So far, I am able to use basic rocksdb functionality in python :)

I think, I will use python ctypes and rocksdb C API. ATM, rocksdb/include/c.h is almost the same with leveldb counterpart (eg. all function names and structs starts with leveldb). Will you keep it that way, or do you plan to change it? or I can maintain and take care of that part happily :)

As a second option, I can directly use rocksdb C++ API, by writing CPython extension. But the outcome won't be portable between different python implementations and will only work with CPython.

What do you think about that?

The rocksdb C++ api is far more richer than the leveldb api. But we have (sadly) failed to enhance the C api in the same way. If you would like to bring the C api in par with C++ api, that will be a great contribution to the rocksdb github repo.

Great then, I am on it :)

@sepeth Feel free to change leveldb_\* in `c.h` to rocksdb_\* and send us a pull request :)

:+1: 

@sepeth if you want to some hands for your contributions, I could be with you. :)

@igorcanadi I sent it :)

@junyoungkim Great :) I started with renames, and I will keep c-api branch updated in my fork as I progress. We can continue from there, I think.

@sepeth ok, I've checked your branch for the jobs. Lets think about how we can implement it in a best way.

I find that rocksdb's C API is much the same with leveldb's C API, I have written a python leveldb binding based on its C API before(https://github.com/forhappy/cpy-leveldb), so I can make it for rocksdb much easier, I'm on it too ;-).

Hi @sepeth have you considered other methods for wrapping ? 

For example Cython has great capabilities to wrap c++ code and the generated code works under python2 and python3

Only drawback, it generates code for cPython only. For a more 'interpreter-independent' way you should also check out CFFI. The 'wrap-performance' on pypy is outstanding (because the JIT knows of the C-functions and types and calls them directly) and on cPython comparable to ctypes.

However I don't know the status of CFFI for Jython/IronPython, but if you really target this two interpreters you should also check if they support ctypes properly.

Hello @sepeth , Any idea on  when the python bindings for RocksDB will be available? 

@ramanala hello, hardest part of it is to complete C api, I believe. I've been doing somethings on that part (but some other things in my life kept me away from doing it), and still stuck with merge operator. In the mean time, I am playing with rocksdb from python. It seems easy to do with ctypes.

@stephan-hof Thank you. I am also considering CFFI, beside ctypes. and also pypy seems to suggest CFFI too.

Hi guys, I also started python bindings for rocksdb. 
Code here https://github.com/stephan-hof/pyrocksdb and the docs here http://pyrocksdb.readthedocs.org/

I'm using cython to wrap the C++ bindings directly. 
I know this makes it impossible to use them under pypy, but I had a couple of reasons to do it
- Experience with Cython (was using it to wrap other c++ libraries).
- Cython has good capabilities to wrap C++, for example automatic exception conversion.
- No dependencies on rocksdb C-API. As mentioned above the C-API lacks behind the features of the C++ driver and it seems to me the new features are implemented in C++ first.

The driver is still not complete yet, for example a python prefix_extractor is not possible, but the basic operations are already possible. Everything mentioned in the docs (like merge operator) should work.

Give it a try, I would be happy for everybody who would like to join the development. 

Closing the issue since it's stale. Thank you everybody for contributing to python bindings!

Has someone created a CFFI extension yet?

