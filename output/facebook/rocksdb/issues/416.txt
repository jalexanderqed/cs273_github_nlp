commit 44f0ff3 introduces the use of FALLOC_FL_PUNCH_HOLE, which according to http://man7.org/linux/man-pages/man2/fallocate.2.html was introduced with the 2.6.38 kernel.  this breaks compilation on rhel6 where 3.5.1 built fine.

i don't have a patch, as i'm not sure which approach is best from a code maintenance perspective:

1) check FALLOC_FL_PUNCH_HOLE when deciding to define ROCKSDB_FALLOCATE_PRESENT

2) more conditional goop at the single point of use in env_posix.cc
-#ifdef ROCKSDB_FALLOCATE_PRESENT
+#if defined(ROCKSDB_FALLOCATE_PRESENT) && defined(FALLOC_FL_PUNCH_HOLE)

3) dummy definition:
# if defined(ROCKSDB_FALLOCATE_PRESENT) && !defined(FALLOC_FL_PUNCH_HOLE)

  #define FALLOC_FL_PUNCH_HOLE 0
# endif

I fixed this by applying the following patch:

``` diff
diff --git a/build_tools/build_detect_platform b/build_tools/build_detect_platform
index c17cd3e..7dd891c 100755
--- a/build_tools/build_detect_platform
+++ b/build_tools/build_detect_platform
@@ -184,7 +184,7 @@ else
       #include <fcntl.h>
       int main() {
        int fd = open("/dev/null", 0);
-       fallocate(fd, 0, 0, 1024);
+       fallocate(fd, FALLOC_FL_KEEP_SIZE | FALLOC_FL_PUNCH_HOLE, 0, 1024);
       }
 EOF
     if [ "$?" = 0 ]; then
```

merely testing for the presence of fallocate doesn't test for the presence of the fallocate flags used by the project.  The above change clarifies the purpose of the original test, which causes the project to build without fallocate.  I have two systems.  One builds successfully without this patch, the other doesn't, and I'm not entirely sure why.  They're both on 2.6.32 with glibc 2.12, not sure where FALLOC_FL_PUNCH_HOLE (which is specifically what I was missing on one machine) is defined.

Tnx @jordanorelli. I applied your patch to master: https://github.com/facebook/rocksdb/commit/155bec4cf22d20c41ce4be93e3a0080b4ef7c7a2

:+1: thanks!

is there data on the performance impact of using (or not) fallocate?  with rocksdb-3.5, i am using fallocate() without FALLOC_FL_PUNCH_HOLE.  while i doubt it's worth the trouble to cater to my systems with extra source code complexity, i'm just curious if someone has done any measuring.  thanks.

That question about the performance benefits of this feature deserves an
answer. I will run a few tests.

On Thu, Jan 15, 2015 at 2:25 PM, maurice barnum notifications@github.com
wrote:

> is there data on the performance impact of using (or not) fallocate? with
> rocksdb-3.5, i am using fallocate() without FALLOC_FL_PUNCH_HOLE. while i
> doubt it's worth the trouble to cater to my systems with extra source code
> complexity, i'm just curious if someone has done any measuring. thanks.
> 
> â€”
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/rocksdb/issues/416#issuecomment-70174327.

## 

Mark Callaghan
mdcallag@gmail.com

We fixed this issue with @jordanorelli's patch, so closing this. @mdcallag let us know if you get some perf numbers on this.

