What's the intended policy for handling the SONAME when building rocksdb with PLATFORM_SHARED_VERSIONED:=true?  Normally, the SONAME for a shared library will be bumped for a change that breaks the ABI.

The case that motivates the question is a change in 3.10, where Env::Schedule() has a new parameter, but the SONAME remains librocksdb.so.3.  Every minor release is likely to be binary incompatible with the previous one, so librocksdb.so.$(MAJOR).$(MINOR) might be a better choice along with reviewing patch releases to ensure they're binary compatible.

[note to those who may doubt the utility of C++11's override:  I caught the problem while building my application, not at load time]

Internally we use RocksDB through a static library, so we didn't think much about this issue. There is code (still from LevelDB) to produce versioned shared library: https://github.com/facebook/rocksdb/blob/master/Makefile#L294

Does `PLATFORM_SHARED_VERSIONED:=true` option doesn't work?

Should we make this default? @meyering is currently making our build process much better, so maybe he can also chime in here.

the feature works, the problem is that with the soname set to "rocksdb.so.3", the shared object built from 3.9 and 3.10 are treated as compatible by the loader on Linux, when in fact they aren't.  I don't think it's reasonable to try and keep the ABI compatible across releases, it'd hold back development too much, although I hope there is more concern with patch releases.

I think that adding the minor version when building a versioned shared library is the right balance.

https://reviews.facebook.net/D36573

@msb-at-yahoo can you confim that https://github.com/facebook/rocksdb/commit/c66483c132bd52bc1f22f6a91843476fd375043c fixes this issue?

Looks good to me.  I don't use "make install" so I don't have any feedback on that bit from the review.

Tnx Maurice.

