Apparently CentOS ext4 kernel module has changed the way it handles fallocate and ftruncate and starting version 2.6.32-358 ftruncate is not sufficient to release previously pre-allocated space.

Below are test results for different combinations of kernel and filesystems. First two show the first centos kernel that got affected. The last two show difference between ext4 and xfs on latest centos kernel. 

**2.6.32-279.22.1.el6.x86_64 (on ext4)**

strace:
`63475 open("/ext4/store_0/548369.sst", O_RDWR|O_CREAT|O_TRUNC, 0644) = 2783`
`63475 fallocate(2783, 01, 0, 13841203)  = 0`
`63475 ftruncate(2783, 9533058)          = 0`
`63475 close(2783)                       = 0`
`63475 open("/ext4/store_0/548369.sst", O_RDONLY) = 2783`

```
[user@host076.hkg1 ~]# du -sh /ext4/store_0/548369.sst
9.1M /ext4/store_0/548369.sst
[user@host076.hkg1 ~]# du -sh /ext4/store_0/548369.sst --apparent-size
9.1M /ext4/store_0/548369.sst
```

**2.6.32-358.2.1.el6.x86_64 (on ext4)**

strace:
`23896 open("/ext4/store_0/409013.sst", O_RDWR|O_CREAT|O_TRUNC, 0644) = 16512`
`23896 fallocate(16512, 01, 0, 13841203) = 0`
`23896 ftruncate(16512, 4862088)         = 0`
`23896 close(16512)                      = 0`
`23896 open("/ext4/store_0/409013.sst", O_RDONLY) = 16512`

```
[user@host075.sjc2 ~]# du -sh /ext4/store_0/409013.sst
14M /ext4/store_0/409013.sst
[user@host075.sjc2 ~]# du -sh /ext4/store_0/409013.sst --apparent-size
4.7M /ext4/store_0/409013.sst
```

**2.6.32-504.12.2.el6.x86_64 (on xfs)**

strace:
`3057  open(“/xfs/store_0/197202.sst", O_RDWR|O_CREAT|O_TRUNC, 0644) = 20000`
`3057  fallocate(20000, 01, 0, 27682406) = 0`
`3057  ftruncate(20000, 1746917)         = 0`
`3057  close(20000)                      = 0`
`3057  open("/xfs/store_0/197202.sst", O_RDONLY) = 20000`

```
[user@host076.sjc2 ~]# du -sh /xfs/store_0/197202.sst
1.7M /xfs/store_0/197202.sst
[user@host076.sjc2 ~]# du -sh /xfs/store_0/197202.sst --apparent-size
1.7M /xfs/store_0/197202.sst
```

**2.6.32-504.12.2.el6.x86_64 (on ext4)**

strace:

`3057  open(“/ext4/store_0/196435.sst", O_RDWR|O_CREAT|O_TRUNC, 0644) = 26509`
`3057  fallocate(26509, 01, 0, 27682406) = 0`
`3057  ftruncate(26509, 13813433)        = 0`
`3057  close(26509)                      = 0`
`3057  open("/ext4/store_0/196435.sst", O_RDONLY) = 26509`

```
[user@host076.sjc2 ~]# du -sh /ext4/store_0/196435.sst
27M /ext4/store_0/196435.sst
[user@host076.sjc2 ~]# du -sh /ext4/store_0/196435.sst --apparent-size
14M /ext4/store_0/196435.sst
```

Thanks for the report @ivan-gusev! Any idea how can we release the space if `ftruncate` is not enough?

We are still investigating this issue but at the moment we do not have a good answer. Would it be possible to allocate the shorter size in the fallocate call or is the extra space being used in the meanwhile?

@vladb38 shorter size in sst files or .log files?

Here's the reason we preallocate: https://reviews.facebook.net/D7953

sst files. We did not see problems with the log files so far.

I see. XFS uses speculative preallocation which might cause the increase in file usage, in case it is not disabled via an option. It seems that ext4 has the opposite problem, in that it makes use wrongly of the information that fallocate provides.

most sst files should be preallocated correctly (they are preallocated to the expected final file_size). can you share some data? how big are the differences for specific sst files?

BTW @vladb38 you guys should add yourself to https://github.com/facebook/rocksdb/blob/master/USERS.md :)

@igorcanadi , you can see two examples above 14MB vs the expected 4.7MB, and 27MB vs the expected 14MB.

Ivan's data from above is quite accurate. The most extreme case we have seen is an set file with 6MB apparent size but 106MB allocated, the 100MB difference being extents marked as unwritten, EOF.

There is already "punch holes" code in Close(), but so far I cant figure out why it is not being applied to SST files. Not sure what class is used for SST files, PosixWritableFile or PosixMmapFile.
https://github.com/facebook/rocksdb/blob/master/util/env_posix.cc#L756

@ivan-gusev https://github.com/facebook/rocksdb/blob/master/db/compaction_job.cc#L1082 -- we use NewWritableFile(), which in turn does this: https://github.com/facebook/rocksdb/blob/master/util/env_posix.cc#L1175-L1185

mmap writes are turned off by default so PosixWritableFile() is used.

Correct, we have not turned on mmap writes. So, PosixWritableFile makes sense.

Hi,

Now that we got #584 fixed here is xfs vs ext4 with 'punch hole' enabled. Still no improvement in disk space usage, even though you can see that fallocate is called with '03' second argument right after ftruncate.

**2.6.32-504.12.2.el6.x86_64 (on xfs)**

`40400 open(“/xfs/store_0/418200.sst", O_RDWR|O_CREAT|O_TRUNC, 0644) = 25316`
`40400 fallocate(25316, 01, 0, 13841203) = 0`
`40400 ftruncate(25316, 9236692)         = 0`
`40400 fallocate(25316, 03, 9236692, 4604511) = 0`
`40400 close(25316)                      = 0`
`40400 open("/xfs/store_0/418200.sst", O_RDONLY) = 25316`

```
[user@host076.sjc2 ~]# du -sh /xfs/store_0/418200.sst
8.9M    /xfs/store_0/418200.sst
[user@host076.sjc2 ~]# du -sh /xfs/store_0/418200.sst --apparent-size
8.9M    /xfs/store_0/418200.sst
```

**2.6.32-504.12.2.el6.x86_64 (on ext4)**

`48742 open(“/ext4/store_0/007502.sst", O_RDWR|O_CREAT|O_TRUNC, 0644) = 2129 `
`48742 fallocate(2129, 01, 0, 27682406)  = 0 `
`48742 ftruncate(2129, 25301400)         = 0 `
`48742 fallocate(2129, 03, 25301400, 2381006) = 0 `
`48742 close(2129) `           

```
[user@host048.sjc2 ~]$ du -sk /ext4/store_0/007502.sst
27036   /ext4/store_0/007502.sst 
[user@host048.sjc2 ~]$ du -sk /ext4/store_0/007502.sst --apparent-size
24709    /ext4/store_0/007502.sst
```

Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.

Hi @ivan-gusev. It's been a while since we discussed this. Is this a bug in ext4 or do you think this is due to RocksDB? Should we add an option to disable the fallocate altogether, since it doesn't seem to work well?

