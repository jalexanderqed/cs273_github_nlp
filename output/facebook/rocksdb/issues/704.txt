 https://reviews.facebook.net/D42321 imposed severe performance penalties on the Windows port and makes it nonfunctional. So much so that unit tests are visibly slow.

To re-cap. The change moved common parts of counters, buffering and rate-limiting to a platform independent code within file_reader_writer.cc.

The problem is that these parts are platform dependent on Windows and there is no easy way to make them portable. The major reason is that Windows env code introduces a file access mode which disables OS file buffering which is a must for any serious server project on Windows. This imposes requirement on buffer alignment and the numbers that we feed to the rate limiter.

The current state of the code features the following on Windows:
- Double accounting for performance counters ( easy to fix)
- Double buffering for Writer (no easy fix)
- Double and incorrect Rate Limiting for Writer (no easy fix)
- Double Locking and double buffering in !use_os_buffer mode in ReadAhead wrapper
- Double virtual dispatch (minor but noticeable for a C++ folks)

Options to fix:
- I have prepared a patch that works and passes unit tests with as little `#ifdef OS_WIN`   as possible. This consists of mostly forwarding the calls down the line and adding some necessary things that would enable existing unit tests pass. This is ugly and brings out platform `ifdefs`code that was previously neatly separated within `env_*.cc` code via virtual interfaces. However, this is the least intrusive option now and unblocks us.
- Rollback the change and do nothing. Things will function as before.
- Rollback and re-work using existing  virtual interface framework for file access classes using some existing patterns such as GoF templates where different pieces of functionality are put into a default implementation of the virtual functions and individual platform decides what to override. This will take time and I do not have Linux box to test.

Thoughts, comments?

I want to understand more about why rate limiting and double buffering are hard to solve for Windows. Can you explain it a little bit more?

I briefly looked at WinWritableFile::Append(). Is it possible for it just simply call WinWritableFile::WriteBuffered()? At the same time, we can make the same option use_os_buffer_ in class WritableFileWriter so it Append() is just a pass through if specified. If you want, we can also add a callback WritableFile::IfMaintainWriteBuffer() or something like that. If returning true, we simply pass through the Append request. Is it good to you?

By the way, you don't need to use ReadAhead wrapper. The default setting is new_table_reader_for_compaction_inputs=false and compaction_readahead_size=0 so that code path is not involved at all. Are you worrying about it because you want to use the feature?

I mean, at least we can do something like this: https://reviews.facebook.net/differential/diff/224721/
From there we can try to see how to move some platform independent codes into common code paths. Sounds a good plan?

@siying My responses might be slow today.

Passing through the env options to the new wrappers is easy and not really an issue.

We need to maintain our own buffer when dealing with unbuffered calls satisfies the following conditions:
- alignment on the physical disk sector (may add a method to env to obtain it)
- disk offset on writes must be on the alignment granularity.
- write only whole pages, incomplete page flushes must be padded.
- Requesting whole page numbers from the RateLimiter

There are similar requirements on read. Thus it was natural to do the buffer maintenance close to the actual OS specific code and created a buffer class which is reused across file access classes.

Bear in mind that meeting requirements from different OS in the same code may constrain your ability to change it and detect breaks.

There is nothing impossible, this is software but this represents a major change for us which we may not be able to accommodate immediately. I am willing to share the patch with you which I am tempted to apply internally to unblock us to meet the deadlines. For now, this is just an informational issue.

@yuslepukhin  is the approach of https://reviews.facebook.net/differential/diff/224721/ good for you for a quick unblock?

@yuslepukhin the read ahead wrapper is totally new thing. All it wants to solve is to use a different file input stream that can be tuned for compactions, and not share with normal reads. It's not a final implementation and by itself there is room to improve. We'll be happy to think of a cleaner abstraction to nicely do it.

@siying I looked at that and my initial patch had a similar concept. However, that would represent a different behavior to other code since unit tests would fail. I can create a pull request and then can answer your questions as to what and why.

@yuslepukhin in short term, I'm willing to provide a simply interface to unblock you. Going forward, I hope the port of platforms to be as thin as possible. The thinner the port is, the less likely our future changes will cause problems for you. I will be happy to change the codes in file_reader_writer.cc so that our application buffering works perfect for you. In the writer part, we can add alignment, padding, all built in our main codes. It will be helpful for other platforms too, including Linux. In the reader part, you can just ignore `ReadaheadRandomAccessFile`. The default options doesn't use it at all. 

@siying Thanks. Let me try to re-work this in the next couple of days.

@siying Please, clarify as what UseDirectIO() means in practice. Thx.

https://github.com/facebook/rocksdb/commit/0886f4f66a9313adca3cd7b4a87968a973bd6594 added it. Someone wants to find a way to disable range sync and sync calls because it is not necessary.

@siying Please, clarify the rationale behind read ahead buffer in random access class so better understand it.

@yuslepukhin if users specify compaction_readahead_size>0 (default is 0), for compaction inputs, the ReadaheadRandomAccessFile will be used as a wrapper of RandomAccessFile to serve compaction inputs (and only compaction inputs), in which we read ahead amount of bytes for as prefetching data for compaction. Based on our benchmarking, it can achieve better throughput of compactions, without tuning OS's prefetch setting. If it doesn't play well with Windows Env, you just set compaction_readahead_size=0 and the wrapper will not be created.

@siying Thanks. It is was not intuitive to have read ahead for random access. It is fine, I will just forward the call in that case since Windows caches too much. Would not want os dpenedant options.

@siying Curious if FlushJobTest.NonEmpty and CompactionJobTest.Simple currently pass on Linux?

@yuslepukhin all the tests pass on Linux. We always keep all tests clean. What error did you see?

@yuslepukhin these are two tests writing to "table/mock_table.h". Maybe something in mock_table does not work well.

Is it solved?

