This pull request adds two new targets to the Makefile: rocksdb.cc and rocksdb.h

These files, when combined with the c.h header, are a self-contained RocksDB source distribution called an amalgamation. (The name comes from SQLite's, which is similar in concept.)

The main benefit of an amalgamation is that it's very easy to drop into a new project. It also compiles faster compared to compiling individual source files and potentially gives the compiler more opportunity to make optimizations since it can see all functions at once. (I haven't done any benchmarking so I don't know if there are actually any measurable improvements.)

rocksdb.cc and rocksdb.h are generated by a new script, amalgamate.py. A description of how amalgamate.py works is in a comment at the top of the file.

There are also some small changes to existing files to enable the amalgamation:
- Use quotes for includes in unity build
- Fix an old header inclusion in util/xfunc.cc
- Move some includes outside ifdef in util/env_hdfs.cc
- Separate out tool sources in Makefile so they won't be included in unity.cc
- Unity build now produces a static library

Closes #733

Hey @edsrzf, can you please squash all the commits together? That keeps our history a bit cleaner :)

Done

This looks great, I'm merging. However, please submit a separate PR with a test that makes sure amalgation compiles correctly and is usable. You should also make the test a part of `.travis.yml` so that ww run it in a continuous build.

Hm, this PR broke `make unity`. 

Oops. I'll get in a PR to fix that and add something to `.travis.yml` to make sure the amalgamation continues compiling.

Shall I add in a rule `unity: unity.a`?

I think it broke unity because now it doesn't have main() function. I guess it doesn't make sense for unity to have main function, so this is good. Yeah, it's probably better to add a rule `unity: unity.a` so we don't try to compile the executable binary. 

