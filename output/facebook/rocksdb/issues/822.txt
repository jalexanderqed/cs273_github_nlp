Currently, a signed `off_t` type is being used for the following interfaces for both offset and the length in bytes:
- `Allocate`
- `RangeSync`
- `Fadvise` internally for `posix_fadvise`

On Linux `off_t` is automatically either 32 or 64-bit depending on the platform.
On Windows it is always a 32-bit signed `long` which limits file access and in particular space pre-allocation to effectively 2 Gb.

Proposal is to replace `off_t` with `size_t` which is automatically 32-bit/64-bit guaranteed everywhere and cast internally. Rationale:
- negative values are neither needed nor used. `fallocate` returns EINVAL if either of the offset or length are negative; `sync_file_range interprets` and `posix_fadvise` the offset as a starting positive value with number of bytes non-negative or error out; 
- `Fasvise` already takes len as size_t in order to call posix_fadvise and `PosixRandomAccessFile::Read` casts to `off_t` in order to call pread since interfaces such as `Read` are already expressed in terms of `uint64_t` everywhere else.
- `InvalidateCache` already takes both offset and len as size_t

Checked in

