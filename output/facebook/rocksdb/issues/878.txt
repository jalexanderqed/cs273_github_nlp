I am getting this exception while booting my program (though it works fine on some other system) 

```
Caused by: java.lang.UnsatisfiedLinkError: /tmp/librocksdbjni2039281941204134312..so: libsnappy.so.1: cannot open shared object file: No such file or directory
        at java.lang.ClassLoader$NativeLibrary.load(Native Method)
        at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1937)
        at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1822)
        at java.lang.Runtime.load0(Runtime.java:809)
        at java.lang.System.load(System.java:1086)
        at org.rocksdb.NativeLibraryLoader.loadLibraryFromJar(NativeLibraryLoader.java:51)
        at org.rocksdb.RocksDB.loadLibrary(RocksDB.java:46)
        at org.rocksdb.RocksDB.<clinit>(RocksDB.java:24)
        at org.reducedata.userdata.connector.RocksDbConnector.connect(RocksDbConnector.java:63)
        at org.reducedata.userdata.connector.RocksDbConnector.initialize(RocksDbConnector.java:43)
        at org.reducedata.userdata.UserDataService.initialize(UserDataService.java:41)
        at org.reducedata.server.di.ServerDI.userDataService(ServerDI.java:261)
        at org.reducedata.server.di.ServerDI$$EnhancerBySpringCGLIB$$c3d78d40.CGLIB$userDataService$14(<generated>)
        at org.reducedata.server.di.ServerDI$$EnhancerBySpringCGLIB$$c3d78d40$$FastClassBySpringCGLIB$$3fa5b9ca.invoke(<generated>)
        at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)
        at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:309)
        at org.reducedata.server.di.ServerDI$$EnhancerBySpringCGLIB$$c3d78d40.userDataService(<generated>)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:497)
        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)
        ... 33 more
```

We have seen a similar UnsatisfiedLinkError w/ rocksdbjni-3.13.1 as well. It only occurs on Linux box on another native method:
15:24:39.708 [DEBUG] [TestEventLogger]     java.lang.UnsatisfiedLinkError: org.rocksdb.FlushOptions.newFlushOptions()V
15:24:39.709 [DEBUG] [TestEventLogger]         at org.rocksdb.FlushOptions.newFlushOptions(Native Method)
15:24:39.709 [DEBUG] [TestEventLogger]         at org.rocksdb.FlushOptions.<init>(FlushOptions.java:14)
15:24:39.710 [DEBUG] [TestEventLogger]         at org.apache.samza.storage.kv.TestRocksDbKeyValueStore.testFlush(TestRocksDbKeyValueStore.scala:73)
15:24:39.711 [DEBUG] [TestEventLogger]         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
15:24:39.711 [DEBUG] [TestEventLogger]         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
15:24:39.712 [DEBUG] [TestEventLogger]         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
15:24:39.712 [DEBUG] [TestEventLogger]         at java.lang.reflect.Method.invoke(Method.java:483)
15:24:39.712 [DEBUG] [TestEventLogger]         at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
15:24:39.713 [DEBUG] [TestEventLogger]         at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
15:24:39.713 [DEBUG] [TestEventLogger]         at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
15:24:39.713 [DEBUG] [TestEventLogger]         at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
15:24:39.714 [DEBUG] [TestEventLogger]         at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
15:24:39.714 [DEBUG] [TestEventLogger]         at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
15:24:39.714 [DEBUG] [TestEventLogger]         at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
15:24:39.715 [DEBUG] [TestEventLogger]         at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
15:24:39.715 [DEBUG] [TestEventLogger]         at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
15:24:39.715 [DEBUG] [TestEventLogger]         at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
15:24:39.716 [DEBUG] [TestEventLogger]         at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
15:24:39.716 [DEBUG] [TestEventLogger]         at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
15:24:39.716 [DEBUG] [TestEventLogger]         at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86)
15:24:39.717 [DEBUG] [TestEventLogger]         at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49)
15:24:39.717 [DEBUG] [TestEventLogger]         at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69)
15:24:39.717 [DEBUG] [TestEventLogger]         at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48)
15:24:39.718 [DEBUG] [TestEventLogger]         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
15:24:39.718 [DEBUG] [TestEventLogger]         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
15:24:39.718 [DEBUG] [TestEventLogger]         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
15:24:39.718 [DEBUG] [TestEventLogger]         at java.lang.reflect.Method.invoke(Method.java:483)
15:24:39.719 [DEBUG] [TestEventLogger]         at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
15:24:39.719 [DEBUG] [TestEventLogger]         at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
15:24:39.719 [DEBUG] [TestEventLogger]         at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
15:24:39.720 [DEBUG] [TestEventLogger]         at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
15:24:39.720 [DEBUG] [TestEventLogger]         at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
15:24:39.720 [DEBUG] [TestEventLogger]         at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105)
15:24:39.721 [DEBUG] [TestEventLogger]         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
15:24:39.721 [DEBUG] [TestEventLogger]         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
15:24:39.721 [DEBUG] [TestEventLogger]         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
15:24:39.722 [DEBUG] [TestEventLogger]         at java.lang.reflect.Method.invoke(Method.java:483)
15:24:39.722 [DEBUG] [TestEventLogger]         at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
15:24:39.722 [DEBUG] [TestEventLogger]         at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
15:24:39.723 [DEBUG] [TestEventLogger]         at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:355)
15:24:39.723 [DEBUG] [TestEventLogger]         at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)
15:24:39.723 [DEBUG] [TestEventLogger]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
15:24:39.724 [DEBUG] [TestEventLogger]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
15:24:39.724 [DEBUG] [TestEventLogger]         at java.lang.Thread.run(Thread.java:745)

Question is: where and in which order does RocksDb JNI look for native libraries to load?

In my case,  it happens as soon as the program tries to load RocksDB Library. 

```
RocksDB.loadLibrary
```

@karma243 @nickpan47 Have you resolved this issue?

I could not fix the issue.

@karma243 Do you have the same issue with the latest release of RocksDB?

@adamretter we were using rocksdbjni-3.13.1 and we couldn't fix the issue either. The workaround we had was to change the order of invocation of rocksdbjni APIs as documented in https://github.com/facebook/rocksdb/issues/989

@adamretter We have discontinued the service which was using RocksDB and have terminated those servers. So cannot reproduce the issue.

