https://github.com/facebook/rocksdb/wiki/Performance-Benchmarks states that two FusionIO cards are in play.  Not sure what models of that card you used, but they can be $10,000 each.  $20,000 disk array is a tad rich for many installation.  And FusionIO really tends to hide stupid code (ask me how I know).  Would you consider retesting with something sane … like two 7500rpm SATA drive?  You might be really, really surprised … and provide better guidance for those that consider your code.

Hey @matthewvon, feel free to run it on rotational disks and let us know the results!

2.4GHZ  4 CPU(24 cores),  512G RAM.
I tested on another SSD with write and read. rocksdb is too slow compare to leveldb.
I use nmon and pstack,  nmon indicates that there is too many cpu +sys, pstack indiate on pread64.

I think default  options->allow_mmap_reads = false is the problem.
I change options->allow_mmap_reads = true, run well.

Can you explain more about your test context? Too slow is a strong claim.
Too slow for one workload is very likely. I assume your test database was
not cached in the RocksDB/LevelDB block cache but did fit in the OS
filesystem cache. In that case mmap reads are faster than doing pread.

On Tue, Feb 25, 2014 at 7:25 PM, cnstar9988 notifications@github.comwrote:

> 2.4GHZ 4 CPU(24 cores), 512G RAM.
> I tested on another SSD with write and read. rocksdb is too slow compare
> to leveldb.
> I use nmon and pstack, nmon indicates that there is too many cpu +sys,
> pstack indiate on pread64.
> 
> I think default options->allow_mmap_reads = false is the problem.
> I change options->allow_mmap_reads = true, run well.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/facebook/rocksdb/issues/88#issuecomment-36087190
> .

## 

Mark Callaghan
mdcallag@gmail.com

My app, more than 10 threads.
each threads: put key-value into db is key not exist; Get old value if key is exist and then overwrite with newValue.

maybe 10x slower, (key=20bytes, value=30bytes, reccount=1000 0000).

> > > I assume your test database was not cached in the RocksDB/LevelDB block cache but did fit in the OS filesystem cache.

I use default options.

RocksDB has a lot of options, perhaps too many. mmap reads are disabled by
default. If you want to use RocksDB then enabling mmap reads might fix this
for you. Increasing the size of the block cache so the database is cached
by it might also help.

On Tue, Feb 25, 2014 at 9:54 PM, cnstar9988 notifications@github.comwrote:

> My app, more than 10 threads.
> each threads: put key-value into db is key not exist; Get old value if key
> is exist and then overwrite with newValue.
> 
> maybe 10x slower, (key=20bytes, value=30bytes, reccount=1000 0000).
> 
>  I assume your test database was not cached in the RocksDB/LevelDB block
> cache but did fit in the OS filesystem cache.
> 
>  I use default options.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/facebook/rocksdb/issues/88#issuecomment-36093361
> .

## 

Mark Callaghan
mdcallag@gmail.com

matthewvon: it appears that you were able to achieve expected results after setting 
options->allow_mmap_reads = true.

Please re-open this issue if you think that there is a bug here.

