Was the java JNI API provided here meant to be thread safe? I'm seeing a variety of segfaults with very simple reproducible test cases, even after upgrading to the latest version of rocksjni.

The following test fails in the multithreaded portion with a variety of issues, like:

```
# Problematic frame:
# C  [librocksdbjni2688018933691133535..so+0x256e3f]  rocksdb::WritableFileWriter::Flush()+0x9f
```

```
# Problematic frame:
# C [librocksdbjni304387322501997252..so+0x1a0d14] rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&, rocksdb::WriteBatch*, rocksdb::WriteCallback*)+0x474
```

The simple test:

```
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.commons.io.FileUtils;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.rocksdb.ColumnFamilyDescriptor;
import org.rocksdb.Options;
import org.rocksdb.RocksDB;
import org.rocksdb.RocksDBException;
import org.rocksdb.WriteBatch;
import org.rocksdb.WriteOptions;

import com.google.common.collect.ContiguousSet;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.Iterables;
import com.google.common.collect.Range;
import com.google.common.primitives.Ints;

public final class RocksDbTest {
    static String DIRECTORY = "testRocksParallelism";

    RocksDB db;
    ColumnFamilyDescriptor cf = new ColumnFamilyDescriptor("test_cf".getBytes());
    @Before
    public void setUp() throws Exception {
        RocksDB.loadLibrary();
        Options options = new Options()
                .setCreateIfMissing(true)
                .setIncreaseParallelism(32);
        FileUtils.deleteDirectory(new File(DIRECTORY));
        db = RocksDB.open(options, DIRECTORY);
        assert (db != null);
        db.createColumnFamily(cf);
    }

    @After
    public void tearDown() throws Exception {
        if (db != null) {
            db.close();
        }
    }

    @Test
    public void testSingleThreaded() {
        test(1);
    }

    @Test
    public void testMultiThreaded() {
        test(10);
    }

    private void test(int numThreads) {
        ExecutorService executorService = Executors.newFixedThreadPool(numThreads);
        List<Runnable> runnables = new ArrayList<Runnable>();

        for (List<Integer> intBatch: Iterables.partition(ContiguousSet.create(Range.open(0, 10000000), DiscreteDomain.integers()), 100000)) {
            WriteBatch wb = new WriteBatch();
            for (Integer intKey : intBatch) {
                wb.put(Ints.toByteArray(intKey), "parallel rocks test".getBytes());
            }

            runnables.add(new Runnable() {
                @Override
                public void run() {
                    try {
                        db.write(new WriteOptions(), wb);
                    } catch (RocksDBException e) {
                        e.printStackTrace();
                    }
                }
            });
        }
        for (Runnable runnable : runnables) {
            executorService.submit(runnable);
        }
        try {
            executorService.shutdown();
            executorService.awaitTermination(1, TimeUnit.DAYS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```

For what it's worth I've written a similar test just to prove to myself that I'm not insane against the C++ API directly, and it behaves as expected.

```
#include <cstdio>
#include <future>
#include <iostream>
#include <string>
#include <vector>

#include "rocksdb/db.h"
#include "rocksdb/slice.h"
#include "rocksdb/options.h"

using namespace rocksdb;

std::string kDBPath = "/tmp/rocksdb_parallel_example";

int main() {
  DB* db;
  Options options;
  options.IncreaseParallelism();
  options.OptimizeLevelStyleCompaction();
  options.create_if_missing = true;

  Status s = DB::Open(options, kDBPath, &db);
  if (!s.ok()) std::cerr << s.ToString() << std::endl;
  assert(s.ok());

  std::vector<std::future<std::vector<Status>>> futures;
  for (int i=0; i < 32; i++) {
    futures.push_back(std::async(std::launch::async, [db](int thread) {
      std::vector<Status> statuses;
      for (int i=0; i<100000; i++) {
        statuses.push_back(db->Put(WriteOptions(), std::string("thread ") + std::to_string(thread) + " " + std::to_string(i), "foo"));
      }
      return statuses;
    }, i));
  }

  for(auto &future : futures) {
    for(auto &status : future.get()) {
      assert(status.ok());
    }
  }

  delete db;

  return 0;
}
```

I can continue to dig into the JNI layers to see where the problems are, but I wanted to make sure I'm not doing something obvious that would always break, so some guidance here is appreciated.

Thanks!

I don't know much about java but the first thing to make sure is that your bytes don't die before you invoke DB::Write(). 

@clockfort In your Java code you are sharing a `WriteBatch` between your threads, in the C++ code you don't use a WriteBatch; So these are quite different examples!

If you read the Javadoc for WriteBatch, it says:

``` java
 * Multiple threads can invoke const methods on a WriteBatch without
 * external synchronization, but if any of the threads may call a
 * non-const method, all threads accessing the same WriteBatch must use
 * external synchronization.
```

Even simpler examples where it's clear the WriteBatch isn't shared among threads appear not to work?

```
       for (List<Integer> intBatch: Iterables.partition(ContiguousSet.create(Range.open(0, 10000), DiscreteDomain.integers()), 100)) {
            runnables.add(new Runnable() {
                @Override
                public void run() {
                    WriteBatch wb = new WriteBatch();
                    for (Integer intKey : intBatch) {
                        wb.put(Ints.toByteArray(intKey), "parallel rocks test".getBytes());
                    }
                    try {
                        db.write(new WriteOptions(), wb);
                    } catch (RocksDBException e) {
                        e.printStackTrace();
                    }
                }
            });
        }
```

fails with 

```
#  SIGSEGV (0xb) at pc=0x000000012973e32d, pid=25228, tid=30471
#
# JRE version: Java(TM) SE Runtime Environment (8.0_71-b15) (build 1.8.0_71-b15)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.71-b15 mixed mode bsd-amd64 compressed oops)
# Problematic frame:
# C  [librocksdbjni1362195727386424381..jnilib+0xf32d]  Java_org_rocksdb_RocksDB_write0+0x1d
```

```
                    wb.put(Ints.toByteArray(intKey), "parallel rocks test".getBytes());
```

Will those arguments be pointing to good values while the wb.put() function is running?

@igorcanadi Yes, I believe they should be valid. I will investigate further...

@clockfort Can you provide a bit more of the _hs_err_ please?

@clockfort At the moment I can't reproduce the issue you are seeing... I will post my test case as a PR shortly.

Nevermind, I'm an idiot. Can no longer repro after shutting down my executor service correctly.

@clockfort I doubt that. Can you paste more of the _hs_err_ please? It would be interesting to know what the problem was that you were seeing. It could perhaps be related to `finalize`.

